alloy:

  mounts:
    varlog: true
    dockercontainers: true

  configMap:
    create: true
    content: |
      
      local.file_match "node_logs" {
        path_targets = [{
        // Monitor syslog to scrape node-logs
        __path__  = "/var/log/syslog",
        job       = "node/syslog",
        node_name = sys.env("HOSTNAME"),
        cluster   = "orbstack",
        }]
      }
      
      loki.source.file "node_logs" {
        targets    = local.file_match.node_logs.targets
        forward_to = [loki.write.default.receiver]
      }
      
      // Discover Kubernetes pods
      discovery.kubernetes "pods" {
        role = "pod"
      }
        
      // Apply relabeling to extract meaningful labels
      discovery.relabel "pods" {
        targets = discovery.kubernetes.pods.targets
      
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action        = "replace"
          target_label  = "namespace"
        }
      
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action        = "replace"
          target_label  = "pod"
        }
      
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action        = "replace"
          target_label  = "container"
        }
      
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          action        = "replace"
          target_label  = "app"
        }
      
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          action        = "replace"
          target_label  = "job"
          separator     = "/"
          replacement   = "$1"
        }
      
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          action        = "replace"
          target_label  = "__path__"
          separator     = "/"
          replacement   = "/var/log/pods/$1/$2/*.log"
        }
      
        rule {
          source_labels = ["__meta_kubernetes_pod_container_id"]
          action        = "replace"
          target_label  = "container_runtime"
          regex         = "^(\\S+):\\/\\/.+$"
          replacement   = "$1"
        }
      }
        
        // Tails logs from Kubernetes containers via the Kubernetes API (no file access needed)
        loki.source.kubernetes "pods" {
          targets    = discovery.relabel.pods.output
          forward_to = [loki.process.pods.receiver]
        }
        
        // Process and attach labels
        loki.process "pods" {
          stage.static_labels {
          values = {
          cluster = "orbstack-cluster",
          }
        }
      
        forward_to = [loki.write.default.receiver]
        }
        
        // Write to Loki
        loki.write "default" {
          endpoint {
          url = "http://loki:3100/loki/api/v1/push"
        }
      }
      
      loki.source.kubernetes_events "cluster_events" {
        job_name   = "integrations/kubernetes/eventhandler"
        log_format = "logfmt"
        forward_to = [
          loki.process.cluster_events.receiver,
        ]
      }
      
      loki.process "cluster_events" {
        forward_to = [loki.write.default.receiver]

        stage.static_labels {
          values = {
            cluster = "orbstack",
          }
        }

        stage.labels {
          values = {
            kubernetes_cluster_events = "job",
          }
        }
      }

controller:
  type: daemonset