// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: user/v2/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "user.v2";

export interface Preferences {
  ageRange: number[];
  distance: number;
  showMe: string;
  lookingFor: string;
}

export interface Location {
  type: string;
  coordinates: number[];
  displayName: string;
}

export interface GetUserByIdRequest {
  id: string;
}

export interface GetUserByEmailRequest {
  email: string;
}

export interface GetUserByIdResponse {
  id: string;
  name: string;
  email: string;
  password?: string | undefined;
  age: number;
  gender: string;
  bio: string;
  photos: string[];
  interests: string[];
  preferences?: Preferences | undefined;
  location?: GetUserByIdResponse_Location | undefined;
  onboardingCompleted?: boolean | undefined;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface GetUserByIdResponse_Location {
  type: string;
  coordinates: number[];
  displayName: string;
}

export interface GetUserByEmailResponse {
  id: string;
  name: string;
  email: string;
  password: string;
  age: number;
  gender: string;
  bio: string;
  photos: string[];
  interests: string[];
  preferences?: Preferences | undefined;
  location?: Location | undefined;
  onboardingCompleted: boolean;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateUserRequest {
  name: string;
  email: string;
  password: string;
}

export interface CreateUserResponse {
  id: string;
  name: string;
  email: string;
  onboardingCompleted: boolean;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateUserRequest {
  name?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  age?: number | undefined;
  gender?: string | undefined;
  bio?: string | undefined;
  photos: string[];
  interests: string[];
  preferences?: Preferences | undefined;
  location?: Location | undefined;
  onboardingCompleted?: boolean | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface UpdateUserResponse {
  id: string;
  name: string;
  email: string;
  password: string;
  age: number;
  gender: string;
  bio: string;
  photos: string[];
  interests: string[];
  onboardingCompleted: boolean;
  status: string;
  createdAt: string;
  updatedAt: string;
}

function createBasePreferences(): Preferences {
  return { ageRange: [], distance: 0, showMe: "", lookingFor: "" };
}

export const Preferences: MessageFns<Preferences> = {
  encode(message: Preferences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ageRange) {
      writer.int32(v);
    }
    writer.join();
    if (message.distance !== 0) {
      writer.uint32(16).int32(message.distance);
    }
    if (message.showMe !== "") {
      writer.uint32(26).string(message.showMe);
    }
    if (message.lookingFor !== "") {
      writer.uint32(34).string(message.lookingFor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Preferences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ageRange.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ageRange.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.distance = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.showMe = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lookingFor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Preferences {
    return {
      ageRange: globalThis.Array.isArray(object?.ageRange) ? object.ageRange.map((e: any) => globalThis.Number(e)) : [],
      distance: isSet(object.distance) ? globalThis.Number(object.distance) : 0,
      showMe: isSet(object.showMe) ? globalThis.String(object.showMe) : "",
      lookingFor: isSet(object.lookingFor) ? globalThis.String(object.lookingFor) : "",
    };
  },

  toJSON(message: Preferences): unknown {
    const obj: any = {};
    if (message.ageRange?.length) {
      obj.ageRange = message.ageRange.map((e) => Math.round(e));
    }
    if (message.distance !== 0) {
      obj.distance = Math.round(message.distance);
    }
    if (message.showMe !== "") {
      obj.showMe = message.showMe;
    }
    if (message.lookingFor !== "") {
      obj.lookingFor = message.lookingFor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Preferences>, I>>(base?: I): Preferences {
    return Preferences.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Preferences>, I>>(object: I): Preferences {
    const message = createBasePreferences();
    message.ageRange = object.ageRange?.map((e) => e) || [];
    message.distance = object.distance ?? 0;
    message.showMe = object.showMe ?? "";
    message.lookingFor = object.lookingFor ?? "";
    return message;
  },
};

function createBaseLocation(): Location {
  return { type: "", coordinates: [], displayName: "" };
}

export const Location: MessageFns<Location> = {
  encode(message: Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    writer.uint32(18).fork();
    for (const v of message.coordinates) {
      writer.double(v);
    }
    writer.join();
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag === 17) {
            message.coordinates.push(reader.double());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.coordinates.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      coordinates: globalThis.Array.isArray(object?.coordinates)
        ? object.coordinates.map((e: any) => globalThis.Number(e))
        : [],
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.coordinates?.length) {
      obj.coordinates = message.coordinates;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Location>, I>>(base?: I): Location {
    return Location.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Location>, I>>(object: I): Location {
    const message = createBaseLocation();
    message.type = object.type ?? "";
    message.coordinates = object.coordinates?.map((e) => e) || [];
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseGetUserByIdRequest(): GetUserByIdRequest {
  return { id: "" };
}

export const GetUserByIdRequest: MessageFns<GetUserByIdRequest> = {
  encode(message: GetUserByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetUserByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByIdRequest>, I>>(base?: I): GetUserByIdRequest {
    return GetUserByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByIdRequest>, I>>(object: I): GetUserByIdRequest {
    const message = createBaseGetUserByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetUserByEmailRequest(): GetUserByEmailRequest {
  return { email: "" };
}

export const GetUserByEmailRequest: MessageFns<GetUserByEmailRequest> = {
  encode(message: GetUserByEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByEmailRequest {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: GetUserByEmailRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByEmailRequest>, I>>(base?: I): GetUserByEmailRequest {
    return GetUserByEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByEmailRequest>, I>>(object: I): GetUserByEmailRequest {
    const message = createBaseGetUserByEmailRequest();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseGetUserByIdResponse(): GetUserByIdResponse {
  return {
    id: "",
    name: "",
    email: "",
    password: undefined,
    age: 0,
    gender: "",
    bio: "",
    photos: [],
    interests: [],
    preferences: undefined,
    location: undefined,
    onboardingCompleted: undefined,
    status: "",
    createdAt: "",
    updatedAt: "",
  };
}

export const GetUserByIdResponse: MessageFns<GetUserByIdResponse> = {
  encode(message: GetUserByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== undefined) {
      writer.uint32(34).string(message.password);
    }
    if (message.age !== 0) {
      writer.uint32(40).int32(message.age);
    }
    if (message.gender !== "") {
      writer.uint32(50).string(message.gender);
    }
    if (message.bio !== "") {
      writer.uint32(58).string(message.bio);
    }
    for (const v of message.photos) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.interests) {
      writer.uint32(74).string(v!);
    }
    if (message.preferences !== undefined) {
      Preferences.encode(message.preferences, writer.uint32(82).fork()).join();
    }
    if (message.location !== undefined) {
      GetUserByIdResponse_Location.encode(message.location, writer.uint32(90).fork()).join();
    }
    if (message.onboardingCompleted !== undefined) {
      writer.uint32(96).bool(message.onboardingCompleted);
    }
    if (message.status !== "") {
      writer.uint32(106).string(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(114).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(122).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gender = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.photos.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.preferences = Preferences.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.location = GetUserByIdResponse_Location.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.onboardingCompleted = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByIdResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : undefined,
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      photos: globalThis.Array.isArray(object?.photos) ? object.photos.map((e: any) => globalThis.String(e)) : [],
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      preferences: isSet(object.preferences) ? Preferences.fromJSON(object.preferences) : undefined,
      location: isSet(object.location) ? GetUserByIdResponse_Location.fromJSON(object.location) : undefined,
      onboardingCompleted: isSet(object.onboardingCompleted)
        ? globalThis.Boolean(object.onboardingCompleted)
        : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: GetUserByIdResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== undefined) {
      obj.password = message.password;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.gender !== "") {
      obj.gender = message.gender;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.photos?.length) {
      obj.photos = message.photos;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.preferences !== undefined) {
      obj.preferences = Preferences.toJSON(message.preferences);
    }
    if (message.location !== undefined) {
      obj.location = GetUserByIdResponse_Location.toJSON(message.location);
    }
    if (message.onboardingCompleted !== undefined) {
      obj.onboardingCompleted = message.onboardingCompleted;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByIdResponse>, I>>(base?: I): GetUserByIdResponse {
    return GetUserByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByIdResponse>, I>>(object: I): GetUserByIdResponse {
    const message = createBaseGetUserByIdResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? undefined;
    message.age = object.age ?? 0;
    message.gender = object.gender ?? "";
    message.bio = object.bio ?? "";
    message.photos = object.photos?.map((e) => e) || [];
    message.interests = object.interests?.map((e) => e) || [];
    message.preferences = (object.preferences !== undefined && object.preferences !== null)
      ? Preferences.fromPartial(object.preferences)
      : undefined;
    message.location = (object.location !== undefined && object.location !== null)
      ? GetUserByIdResponse_Location.fromPartial(object.location)
      : undefined;
    message.onboardingCompleted = object.onboardingCompleted ?? undefined;
    message.status = object.status ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseGetUserByIdResponse_Location(): GetUserByIdResponse_Location {
  return { type: "", coordinates: [], displayName: "" };
}

export const GetUserByIdResponse_Location: MessageFns<GetUserByIdResponse_Location> = {
  encode(message: GetUserByIdResponse_Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    writer.uint32(18).fork();
    for (const v of message.coordinates) {
      writer.double(v);
    }
    writer.join();
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByIdResponse_Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIdResponse_Location();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag === 17) {
            message.coordinates.push(reader.double());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.coordinates.push(reader.double());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByIdResponse_Location {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      coordinates: globalThis.Array.isArray(object?.coordinates)
        ? object.coordinates.map((e: any) => globalThis.Number(e))
        : [],
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: GetUserByIdResponse_Location): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.coordinates?.length) {
      obj.coordinates = message.coordinates;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByIdResponse_Location>, I>>(base?: I): GetUserByIdResponse_Location {
    return GetUserByIdResponse_Location.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByIdResponse_Location>, I>>(object: I): GetUserByIdResponse_Location {
    const message = createBaseGetUserByIdResponse_Location();
    message.type = object.type ?? "";
    message.coordinates = object.coordinates?.map((e) => e) || [];
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseGetUserByEmailResponse(): GetUserByEmailResponse {
  return {
    id: "",
    name: "",
    email: "",
    password: "",
    age: 0,
    gender: "",
    bio: "",
    photos: [],
    interests: [],
    preferences: undefined,
    location: undefined,
    onboardingCompleted: false,
    status: "",
    createdAt: "",
    updatedAt: "",
  };
}

export const GetUserByEmailResponse: MessageFns<GetUserByEmailResponse> = {
  encode(message: GetUserByEmailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.age !== 0) {
      writer.uint32(40).int32(message.age);
    }
    if (message.gender !== "") {
      writer.uint32(50).string(message.gender);
    }
    if (message.bio !== "") {
      writer.uint32(58).string(message.bio);
    }
    for (const v of message.photos) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.interests) {
      writer.uint32(74).string(v!);
    }
    if (message.preferences !== undefined) {
      Preferences.encode(message.preferences, writer.uint32(82).fork()).join();
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(90).fork()).join();
    }
    if (message.onboardingCompleted !== false) {
      writer.uint32(96).bool(message.onboardingCompleted);
    }
    if (message.status !== "") {
      writer.uint32(106).string(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(114).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(122).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserByEmailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gender = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.photos.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.preferences = Preferences.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.onboardingCompleted = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserByEmailResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      photos: globalThis.Array.isArray(object?.photos) ? object.photos.map((e: any) => globalThis.String(e)) : [],
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      preferences: isSet(object.preferences) ? Preferences.fromJSON(object.preferences) : undefined,
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      onboardingCompleted: isSet(object.onboardingCompleted) ? globalThis.Boolean(object.onboardingCompleted) : false,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: GetUserByEmailResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.gender !== "") {
      obj.gender = message.gender;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.photos?.length) {
      obj.photos = message.photos;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.preferences !== undefined) {
      obj.preferences = Preferences.toJSON(message.preferences);
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.onboardingCompleted !== false) {
      obj.onboardingCompleted = message.onboardingCompleted;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserByEmailResponse>, I>>(base?: I): GetUserByEmailResponse {
    return GetUserByEmailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserByEmailResponse>, I>>(object: I): GetUserByEmailResponse {
    const message = createBaseGetUserByEmailResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.age = object.age ?? 0;
    message.gender = object.gender ?? "";
    message.bio = object.bio ?? "";
    message.photos = object.photos?.map((e) => e) || [];
    message.interests = object.interests?.map((e) => e) || [];
    message.preferences = (object.preferences !== undefined && object.preferences !== null)
      ? Preferences.fromPartial(object.preferences)
      : undefined;
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.onboardingCompleted = object.onboardingCompleted ?? false;
    message.status = object.status ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseCreateUserRequest(): CreateUserRequest {
  return { name: "", email: "", password: "" };
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: CreateUserRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRequest>, I>>(base?: I): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRequest>, I>>(object: I): CreateUserRequest {
    const message = createBaseCreateUserRequest();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseCreateUserResponse(): CreateUserResponse {
  return { id: "", name: "", email: "", onboardingCompleted: false, status: "", createdAt: "", updatedAt: "" };
}

export const CreateUserResponse: MessageFns<CreateUserResponse> = {
  encode(message: CreateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.onboardingCompleted !== false) {
      writer.uint32(32).bool(message.onboardingCompleted);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.onboardingCompleted = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      onboardingCompleted: isSet(object.onboardingCompleted) ? globalThis.Boolean(object.onboardingCompleted) : false,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: CreateUserResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.onboardingCompleted !== false) {
      obj.onboardingCompleted = message.onboardingCompleted;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserResponse>, I>>(base?: I): CreateUserResponse {
    return CreateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserResponse>, I>>(object: I): CreateUserResponse {
    const message = createBaseCreateUserResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.onboardingCompleted = object.onboardingCompleted ?? false;
    message.status = object.status ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseUpdateUserRequest(): UpdateUserRequest {
  return {
    name: undefined,
    email: undefined,
    password: undefined,
    age: undefined,
    gender: undefined,
    bio: undefined,
    photos: [],
    interests: [],
    preferences: undefined,
    location: undefined,
    onboardingCompleted: undefined,
    status: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const UpdateUserRequest: MessageFns<UpdateUserRequest> = {
  encode(message: UpdateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== undefined) {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== undefined) {
      writer.uint32(34).string(message.password);
    }
    if (message.age !== undefined) {
      writer.uint32(40).int32(message.age);
    }
    if (message.gender !== undefined) {
      writer.uint32(50).string(message.gender);
    }
    if (message.bio !== undefined) {
      writer.uint32(58).string(message.bio);
    }
    for (const v of message.photos) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.interests) {
      writer.uint32(74).string(v!);
    }
    if (message.preferences !== undefined) {
      Preferences.encode(message.preferences, writer.uint32(82).fork()).join();
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(90).fork()).join();
    }
    if (message.onboardingCompleted !== undefined) {
      writer.uint32(96).bool(message.onboardingCompleted);
    }
    if (message.status !== undefined) {
      writer.uint32(106).string(message.status);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(114).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(122).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gender = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.photos.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.preferences = Preferences.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.onboardingCompleted = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : undefined,
      age: isSet(object.age) ? globalThis.Number(object.age) : undefined,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : undefined,
      bio: isSet(object.bio) ? globalThis.String(object.bio) : undefined,
      photos: globalThis.Array.isArray(object?.photos) ? object.photos.map((e: any) => globalThis.String(e)) : [],
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      preferences: isSet(object.preferences) ? Preferences.fromJSON(object.preferences) : undefined,
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      onboardingCompleted: isSet(object.onboardingCompleted)
        ? globalThis.Boolean(object.onboardingCompleted)
        : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : undefined,
    };
  },

  toJSON(message: UpdateUserRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.password !== undefined) {
      obj.password = message.password;
    }
    if (message.age !== undefined) {
      obj.age = Math.round(message.age);
    }
    if (message.gender !== undefined) {
      obj.gender = message.gender;
    }
    if (message.bio !== undefined) {
      obj.bio = message.bio;
    }
    if (message.photos?.length) {
      obj.photos = message.photos;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.preferences !== undefined) {
      obj.preferences = Preferences.toJSON(message.preferences);
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.onboardingCompleted !== undefined) {
      obj.onboardingCompleted = message.onboardingCompleted;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(base?: I): UpdateUserRequest {
    return UpdateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(object: I): UpdateUserRequest {
    const message = createBaseUpdateUserRequest();
    message.name = object.name ?? undefined;
    message.email = object.email ?? undefined;
    message.password = object.password ?? undefined;
    message.age = object.age ?? undefined;
    message.gender = object.gender ?? undefined;
    message.bio = object.bio ?? undefined;
    message.photos = object.photos?.map((e) => e) || [];
    message.interests = object.interests?.map((e) => e) || [];
    message.preferences = (object.preferences !== undefined && object.preferences !== null)
      ? Preferences.fromPartial(object.preferences)
      : undefined;
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.onboardingCompleted = object.onboardingCompleted ?? undefined;
    message.status = object.status ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseUpdateUserResponse(): UpdateUserResponse {
  return {
    id: "",
    name: "",
    email: "",
    password: "",
    age: 0,
    gender: "",
    bio: "",
    photos: [],
    interests: [],
    onboardingCompleted: false,
    status: "",
    createdAt: "",
    updatedAt: "",
  };
}

export const UpdateUserResponse: MessageFns<UpdateUserResponse> = {
  encode(message: UpdateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.age !== 0) {
      writer.uint32(40).int32(message.age);
    }
    if (message.gender !== "") {
      writer.uint32(50).string(message.gender);
    }
    if (message.bio !== "") {
      writer.uint32(58).string(message.bio);
    }
    for (const v of message.photos) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.interests) {
      writer.uint32(74).string(v!);
    }
    if (message.onboardingCompleted !== false) {
      writer.uint32(96).bool(message.onboardingCompleted);
    }
    if (message.status !== "") {
      writer.uint32(106).string(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(114).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(122).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gender = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.photos.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.onboardingCompleted = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      photos: globalThis.Array.isArray(object?.photos) ? object.photos.map((e: any) => globalThis.String(e)) : [],
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      onboardingCompleted: isSet(object.onboardingCompleted) ? globalThis.Boolean(object.onboardingCompleted) : false,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: UpdateUserResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.gender !== "") {
      obj.gender = message.gender;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.photos?.length) {
      obj.photos = message.photos;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.onboardingCompleted !== false) {
      obj.onboardingCompleted = message.onboardingCompleted;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserResponse>, I>>(base?: I): UpdateUserResponse {
    return UpdateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserResponse>, I>>(object: I): UpdateUserResponse {
    const message = createBaseUpdateUserResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.age = object.age ?? 0;
    message.gender = object.gender ?? "";
    message.bio = object.bio ?? "";
    message.photos = object.photos?.map((e) => e) || [];
    message.interests = object.interests?.map((e) => e) || [];
    message.onboardingCompleted = object.onboardingCompleted ?? false;
    message.status = object.status ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  getUserById: {
    path: "/user.v2.UserService/GetUserById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserByIdRequest): Buffer => Buffer.from(GetUserByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserByIdRequest => GetUserByIdRequest.decode(value),
    responseSerialize: (value: GetUserByIdResponse): Buffer => Buffer.from(GetUserByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserByIdResponse => GetUserByIdResponse.decode(value),
  },
  getUserByEmail: {
    path: "/user.v2.UserService/GetUserByEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserByEmailRequest): Buffer =>
      Buffer.from(GetUserByEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserByEmailRequest => GetUserByEmailRequest.decode(value),
    responseSerialize: (value: GetUserByEmailResponse): Buffer =>
      Buffer.from(GetUserByEmailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserByEmailResponse => GetUserByEmailResponse.decode(value),
  },
  createUser: {
    path: "/user.v2.UserService/CreateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest): Buffer => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateUserRequest => CreateUserRequest.decode(value),
    responseSerialize: (value: CreateUserResponse): Buffer => Buffer.from(CreateUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateUserResponse => CreateUserResponse.decode(value),
  },
  updateUser: {
    path: "/user.v2.UserService/UpdateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserRequest): Buffer => Buffer.from(UpdateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateUserRequest => UpdateUserRequest.decode(value),
    responseSerialize: (value: UpdateUserResponse): Buffer => Buffer.from(UpdateUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateUserResponse => UpdateUserResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  getUserById: handleUnaryCall<GetUserByIdRequest, GetUserByIdResponse>;
  getUserByEmail: handleUnaryCall<GetUserByEmailRequest, GetUserByEmailResponse>;
  createUser: handleUnaryCall<CreateUserRequest, CreateUserResponse>;
  updateUser: handleUnaryCall<UpdateUserRequest, UpdateUserResponse>;
}

export interface UserServiceClient extends Client {
  getUserById(
    request: GetUserByIdRequest,
    callback: (error: ServiceError | null, response: GetUserByIdResponse) => void,
  ): ClientUnaryCall;
  getUserById(
    request: GetUserByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserByIdResponse) => void,
  ): ClientUnaryCall;
  getUserById(
    request: GetUserByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserByIdResponse) => void,
  ): ClientUnaryCall;
  getUserByEmail(
    request: GetUserByEmailRequest,
    callback: (error: ServiceError | null, response: GetUserByEmailResponse) => void,
  ): ClientUnaryCall;
  getUserByEmail(
    request: GetUserByEmailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserByEmailResponse) => void,
  ): ClientUnaryCall;
  getUserByEmail(
    request: GetUserByEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserByEmailResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    callback: (error: ServiceError | null, response: CreateUserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateUserResponse) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateUserResponse) => void,
  ): ClientUnaryCall;
  updateUser(
    request: UpdateUserRequest,
    callback: (error: ServiceError | null, response: UpdateUserResponse) => void,
  ): ClientUnaryCall;
  updateUser(
    request: UpdateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateUserResponse) => void,
  ): ClientUnaryCall;
  updateUser(
    request: UpdateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateUserResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.v2.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
