// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: interaction/v1/interaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "interaction.v1";

export interface GetAlreadyInteractedUsersRequest {
  userId: string;
}

export interface GetAlreadyInteractedUsersResponse {
  usersIds: string[];
}

function createBaseGetAlreadyInteractedUsersRequest(): GetAlreadyInteractedUsersRequest {
  return { userId: "" };
}

export const GetAlreadyInteractedUsersRequest: MessageFns<GetAlreadyInteractedUsersRequest> = {
  encode(message: GetAlreadyInteractedUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlreadyInteractedUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlreadyInteractedUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlreadyInteractedUsersRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetAlreadyInteractedUsersRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAlreadyInteractedUsersRequest>, I>>(
    base?: I,
  ): GetAlreadyInteractedUsersRequest {
    return GetAlreadyInteractedUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAlreadyInteractedUsersRequest>, I>>(
    object: I,
  ): GetAlreadyInteractedUsersRequest {
    const message = createBaseGetAlreadyInteractedUsersRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetAlreadyInteractedUsersResponse(): GetAlreadyInteractedUsersResponse {
  return { usersIds: [] };
}

export const GetAlreadyInteractedUsersResponse: MessageFns<GetAlreadyInteractedUsersResponse> = {
  encode(message: GetAlreadyInteractedUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.usersIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlreadyInteractedUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlreadyInteractedUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.usersIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlreadyInteractedUsersResponse {
    return {
      usersIds: globalThis.Array.isArray(object?.usersIds) ? object.usersIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetAlreadyInteractedUsersResponse): unknown {
    const obj: any = {};
    if (message.usersIds?.length) {
      obj.usersIds = message.usersIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAlreadyInteractedUsersResponse>, I>>(
    base?: I,
  ): GetAlreadyInteractedUsersResponse {
    return GetAlreadyInteractedUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAlreadyInteractedUsersResponse>, I>>(
    object: I,
  ): GetAlreadyInteractedUsersResponse {
    const message = createBaseGetAlreadyInteractedUsersResponse();
    message.usersIds = object.usersIds?.map((e) => e) || [];
    return message;
  },
};

export type InteractionServiceService = typeof InteractionServiceService;
export const InteractionServiceService = {
  getAlreadyInteractedUsers: {
    path: "/interaction.v1.InteractionService/GetAlreadyInteractedUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAlreadyInteractedUsersRequest): Buffer =>
      Buffer.from(GetAlreadyInteractedUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAlreadyInteractedUsersRequest =>
      GetAlreadyInteractedUsersRequest.decode(value),
    responseSerialize: (value: GetAlreadyInteractedUsersResponse): Buffer =>
      Buffer.from(GetAlreadyInteractedUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAlreadyInteractedUsersResponse =>
      GetAlreadyInteractedUsersResponse.decode(value),
  },
} as const;

export interface InteractionServiceServer extends UntypedServiceImplementation {
  getAlreadyInteractedUsers: handleUnaryCall<GetAlreadyInteractedUsersRequest, GetAlreadyInteractedUsersResponse>;
}

export interface InteractionServiceClient extends Client {
  getAlreadyInteractedUsers(
    request: GetAlreadyInteractedUsersRequest,
    callback: (error: ServiceError | null, response: GetAlreadyInteractedUsersResponse) => void,
  ): ClientUnaryCall;
  getAlreadyInteractedUsers(
    request: GetAlreadyInteractedUsersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAlreadyInteractedUsersResponse) => void,
  ): ClientUnaryCall;
  getAlreadyInteractedUsers(
    request: GetAlreadyInteractedUsersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAlreadyInteractedUsersResponse) => void,
  ): ClientUnaryCall;
}

export const InteractionServiceClient = makeGenericClientConstructor(
  InteractionServiceService,
  "interaction.v1.InteractionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InteractionServiceClient;
  service: typeof InteractionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
