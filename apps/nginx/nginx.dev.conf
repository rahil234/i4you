events {}

http {
    resolver 127.0.0.11 valid=10s;

    map $uri $backend_service {
        default                    "gateway-server:4000";
        ~^/api/v1/auth(/|$)        "auth-service:3001";
        ~^/api/v1/user(/|$)        "user-service:3002";
        ~^/api/v1/media(/|$)       "media-service:3003";
        ~^/api/v1/orders(/|$)      "orders-service:3004";
    }

    map $arg_service $socket_backend {
        default         "chat-service:3004";
        video           "video-service:5000";
        chat            "chat-service:3004";
    }

    server {
        listen 80;
        server_name i4you.local.net;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name i4you.local.net;

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        access_log off;

        location = /auth {
            internal;
            proxy_pass http://validate-service:5000/;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Cookie $http_cookie;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Uri $request_uri;
            proxy_set_header X-Forwarded-Method $request_method;
        }

        # WebSocket handling
        location /socket.io {
            proxy_pass http://$socket_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Cookie $http_cookie;
        }

        location /api/v1/validate/health {
            proxy_pass http://validate-service:5000/health;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Uri $request_uri;
            proxy_set_header X-Forwarded-Method $request_method;
        }

        # Authenticated APIs (injects X-User-ID and X-User-Role headers)
        location ~ ^/api/v1/(auth|user|media|orders)(/.*)?$ {
            set $service $1;
            set $remaining_path $2;

            auth_request /auth;
            auth_request_set $auth_user_id $upstream_http_x_user_id;
            auth_request_set $auth_user_role $upstream_http_x_user_role;

            proxy_set_header X-User-ID $auth_user_id;
            proxy_set_header X-User-Role $auth_user_role;

            # Set default if path is empty
            if ($remaining_path = "") {
                set $remaining_path "/";
            }

            proxy_pass http://$backend_service$remaining_path;
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            proxy_pass http://host.docker.internal:3000;
            proxy_http_version 1.1;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
